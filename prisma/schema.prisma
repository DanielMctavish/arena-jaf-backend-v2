// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserAdm {
  id           String         @id @default(cuid())
  saldo        Float
  email        String         @unique
  nome         String
  senha        String
  avatar_url   String
  Machines     Machines[]
  ArenaLocal   ArenaLocal[]
  Transactions Transactions[]
  Sessions     Sessions[]
  UserClient   UserClient[]
  created_at   DateTime       @default(now())
  updated_at   DateTime       @default(now()) @updatedAt
}

model UserColab {
  id         String      @id @default(cuid())
  saldo      Float
  email      String      @unique
  nome       String
  senha      String
  avatar_url String
  local      ArenaLocal?
  Machines   Machines[]
  created_at DateTime    @default(now())
  updated_at DateTime    @default(now()) @updatedAt
}

model UserClient {
  id               String         @id @default(cuid())
  email            String
  saldo            Float
  horas            Float?
  tel              String?
  address          String?
  nome             String
  cpf              String
  senha            String
  avatar_url       String
  Administrator    UserAdm        @relation(fields: [administrator_id], references: [id])
  administrator_id String
  Sessions         Sessions[]
  Transactions     Transactions[]
  Events           IEvents[]
  Machines         Machines[]
  isPlaying        Boolean
  created_at       DateTime       @default(now())
  updated_at       DateTime       @default(now()) @updatedAt
}

model ArenaLocal {
  id                 String     @id @default(cuid())
  nome               String
  end_url_google     String
  proprietario       UserAdm    @relation(fields: [userAdmId], references: [id])
  userAdmId          String
  proprietario_colab UserColab? @relation(fields: [userColabId], references: [id])
  userColabId        String?    @unique
  Sessions           Sessions[]
  Products           Products[]
  Machines           Machines[]
  created_at         DateTime   @default(now())
  updated_at         DateTime   @default(now()) @updatedAt
}

model Sessions {
  id               String         @id @default(cuid())
  duration         Int
  timer_started_at DateTime
  timer_ended_at   DateTime
  status           SESSION_STATUS
  UserAdm          UserAdm        @relation(fields: [adm_id], references: [id])
  adm_id           String
  Client           UserClient     @relation(fields: [client_id], references: [id])
  client_id        String
  location         ArenaLocal     @relation(fields: [local_id], references: [id])
  local_id         String
  Machine          Machines       @relation(fields: [machine_id], references: [id])
  machine_id       String
  products         Products[]
  created_at       DateTime       @default(now())
  updated_at       DateTime       @default(now()) @updatedAt
}

model Products {
  id         String      @id @default(cuid())
  owner_id   String
  name       String
  url_img    String
  available  Int
  value      Float
  local      ArenaLocal? @relation(fields: [local_id], references: [id])
  local_id   String?
  Sessions   Sessions?   @relation(fields: [session_id], references: [id])
  session_id String?
  created_at DateTime    @default(now())
  updated_at DateTime    @default(now()) @updatedAt
}

model Transactions {
  id                  String           @id @default(cuid())
  value               Float
  transaction_type    TRANSACTION_TYPE
  fluxo               FLOW_TYPE
  product_description String?
  method              METHOD_PAYMENT
  status              STATUS_PAYMENT
  UserAdm             UserAdm?         @relation(fields: [userAdmId], references: [id])
  userAdmId           String?
  Client              UserClient?      @relation(fields: [userClientId], references: [id])
  userClientId        String?
  created_at          DateTime         @default(now())
  updated_at          DateTime         @default(now()) @updatedAt
}

model Machines {
  id            String             @id @default(cuid())
  position      Int?
  CurrentClient UserClient?        @relation(fields: [client_id], references: [id])
  client_id     String?
  nano_id       String
  connection    MACHINE_CONNECTION
  status        MACHINE_STATUS
  type          MACHINE_TYPE
  UserAdm       UserAdm            @relation(fields: [userAdmId], references: [id])
  userAdmId     String
  UserColab     UserColab?         @relation(fields: [userColabId], references: [id])
  userColabId   String?
  local         ArenaLocal?        @relation(fields: [arenaLocalId], references: [id])
  arenaLocalId  String
  sessions      Sessions[]
  created_at    DateTime           @default(now())
  updated_at    DateTime           @default(now()) @updatedAt
}

model IEvents {
  id          String       @id @default(cuid())
  title       String
  value       Float
  members     UserClient[]
  description String
  cover_url   String
  created_at  DateTime     @default(now())
  updated_at  DateTime     @default(now()) @updatedAt
}

enum SESSION_STATUS {
  RUNNING
  PAUSED
}

enum TRANSACTION_TYPE {
  PRODUCT
  MACHINE_CREDIT
  SPLIT
}

enum FLOW_TYPE {
  IN
  OUT
}

enum METHOD_PAYMENT {
  DEBITO
  CREDITO
  PIX
  LOCAL
}

enum STATUS_PAYMENT {
  APPROVED
  PENDENT
  CANCEL
}

enum MACHINE_CONNECTION {
  DISCONECTED
  CONECTED
}

enum MACHINE_STATUS {
  RUNNING
  STOPED
}

enum MACHINE_TYPE {
  PC
  XBOX
  PS5
  VR
  FLIPERAMA
  SIMULATOR
}
